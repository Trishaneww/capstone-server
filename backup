// app.put("/update", async (req, res) => {
//     const user = await knex('users')
//     .where({id: 1})
//     .update({activity: 9})

//     if (user) {
//       const updatedUser = await knex("users").where({ id: user });
//       res.status(200).json(updatedUser);
//     } else {
//       console.log("doesnt exist")
//     }
// })
let refreshTokens = []
app.post('/refresh', (req, res) => {
  const refreshToken = req.body.token
  console.log(refreshToken)

  if(!refreshToken) return res.status(401).json("You aee not authenticated")
  if (!refreshTokens.includes(refreshToken)) {
    return res.status(403).json("Refresh token is not valid!")
  }

  jwt.verify(refreshToken, "myRefreshSecretKey", (err, user) => {
    err && console.log(err)
    refreshTokens = refreshTokens.filter((token) => token !== refreshToken)

    const newAccessToken = generateAccessToken(user);
    const newRefreshToken = generateRefreshToken(user);

  res.status(200).json({
    accessToken: newAccessToken, refreshToken: newRefreshToken
  })
})
})

const generateAccessToken = (user) => {
  return jwt.sign({ id: user.id, isAdmin: user.isAdmin}, "mySecretKey",
  { expiresIn: "20s"} )
}

const generateRefreshToken = (user) => {
  return jwt.sign({ id: user.id, isAdmin: user.isAdmin}, "myRefreshSecretKey" )
}


app.post('/login', async (req, res) => {
  const { username, password } = req.body
  const users = await knex("users");
  const user = users.find((u) => {
    return u.username === username && u.password === password
  })
  if (user) {
    // Generate access token
    const accessToken = generateAccessToken(user)
    const refreshToken = generateRefreshToken(user)
    refreshTokens.push(refreshToken)
    res.json( {
      username: user.username,
      isAdmin: user.isAdmin,
      accessToken,
      refreshToken
    })

  } else {
     res.status(400).json("Username or password inccorect")
  }
})

const verify = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (authHeader) {
    // splits to sperate bearer
    const token = authHeader.split(" ")[1]

    jwt.verify(token, "mySecretKey", (err, user) => {
      if (err) {
        console.log(token)
        console.log(err)
        return res.status(403).json("Token is not valid!")
      }
      req.user = user;
      next()
    })
  } else {
    res.status(401).json('You are not authorized')
  }
}

app.post('/logout', verify, (req, res) => {
  const refreshToken = req.body.token;
  console.log(refreshToken)
  refreshTokens = refreshTokens.filter((token) => token !== refreshToken)
  res.status(200).json("You logged out succesfully")
})

app.delete('/users/:id', verify, (req, res) => {
  if (req.user.id === parseInt(req.params.id) || req.user.isAdmin) {
    res.status(200).json("User has been deleted")
  } else {
    res.status(403).json("You are not allowed to delete this user")
  }
})


// const express = require('express');
// const knex = require("knex")(require("../knexfile"));
// const jwt = require('jsonwebtoken')
// const router = express.Router();
// maxAge = 3*24*60*60;

// const createToken = (id) => {
//     return jwt.sign({id}, "secretkey", {
//         expiresIn: maxAge
//     })
// }

// router.post('/register', async (req, res, next) => {
//     try {
//         const createUser = await knex.insert(req.body).into("users")
//         const newUserId = createUser[0];
//         const token = createToken(newUserId)
//         const user = await knex("users").where({
//             id: newUserId,
//         });
//         console.log(user)
//         console.log(token)
//         res.cookie("jwt", token, {
//             withCrdentials: true,
//             httpOnly: false,
//             maxAge: maxAge * 1000,
//         })
//     } catch (err) {
//         console.log(err)
//     }
//     next()
// })


// router.get("/", async (req, res) => {
//     try {
//       const data = await knex("users");
//       res.status(200).send(data);
//     } catch (err) {
//       res.status(400).send(`Error retrieving users: ${err}`);
//     }
// });

// router.post("/", async (req, res) => {
//     try {
//       const data = await knex.insert(req.body).into("decks");
//       const newDeckId = data[0];
//       const createdDeck = await knex("decks").where({
//         id: newDeckId,
//       });

//       console.log(createdDeck);

//     } catch (err) {
//       res
//         .status(500)
//         .send({ message: `Unable to create new deck: ${err}` });
//         console.log({ message: `Unable to create new deck: ${err}` });
//     }
// });
// module.exports = router



{/* <div className="deck-container">
            <div className="deck-container-flashcard" style={{width: "100%" }}>
                {flashcards.map((flashcard, index) => {
                    return (
                        <div style={{width: "100%" }}>
                        {index === current && (
                            <Flashcard flashcard={flashcard} index={index}/>
                            )}
                        </div>
                    )
                })}
            </div>
                {current !== length && (
                    <div className="deck-container__arrows-container">
                        <div className="deck-container__arrows-container-arrow" onClick={incorrect}>
                          <AiOutlineClose style={{color: "red"}} size={30} />
                      </div>
                      <p>{current + 1}/{flashcards.length}</p>
                      <div className="deck-container__arrows-container-arrow" onClick={correct}>
                          <IoMdCheckmark style={{color: "green"}}size={30} />
                      </div>  
                      </div>
                )}

                {current === length && (
                    <div>
                        <div style={{ width: 200, height: 200 }}>
                            <CircularProgressbar value={percent} strokeWidth={10} text={`${percent}%`} styles={buildStyles({strokeLinecap: 'butt', textSize: '16px', pathColor: `#f7b4ff`, textColor: 'white', trailColor: '#474a4d'})}/>;
                        </div>
                    </div>
                )}
        </div> */}