// app.put("/update", async (req, res) => {
//     const user = await knex('users')
//     .where({id: 1})
//     .update({activity: 9})

//     if (user) {
//       const updatedUser = await knex("users").where({ id: user });
//       res.status(200).json(updatedUser);
//     } else {
//       console.log("doesnt exist")
//     }
// })
let refreshTokens = []
app.post('/refresh', (req, res) => {
  const refreshToken = req.body.token
  console.log(refreshToken)

  if(!refreshToken) return res.status(401).json("You aee not authenticated")
  if (!refreshTokens.includes(refreshToken)) {
    return res.status(403).json("Refresh token is not valid!")
  }

  jwt.verify(refreshToken, "myRefreshSecretKey", (err, user) => {
    err && console.log(err)
    refreshTokens = refreshTokens.filter((token) => token !== refreshToken)

    const newAccessToken = generateAccessToken(user);
    const newRefreshToken = generateRefreshToken(user);

  res.status(200).json({
    accessToken: newAccessToken, refreshToken: newRefreshToken
  })
})
})

const generateAccessToken = (user) => {
  return jwt.sign({ id: user.id, isAdmin: user.isAdmin}, "mySecretKey",
  { expiresIn: "20s"} )
}

const generateRefreshToken = (user) => {
  return jwt.sign({ id: user.id, isAdmin: user.isAdmin}, "myRefreshSecretKey" )
}


app.post('/login', async (req, res) => {
  const { username, password } = req.body
  const users = await knex("users");
  const user = users.find((u) => {
    return u.username === username && u.password === password
  })
  if (user) {
    // Generate access token
    const accessToken = generateAccessToken(user)
    const refreshToken = generateRefreshToken(user)
    refreshTokens.push(refreshToken)
    res.json( {
      username: user.username,
      isAdmin: user.isAdmin,
      accessToken,
      refreshToken
    })

  } else {
     res.status(400).json("Username or password inccorect")
  }
})

const verify = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (authHeader) {
    // splits to sperate bearer
    const token = authHeader.split(" ")[1]

    jwt.verify(token, "mySecretKey", (err, user) => {
      if (err) {
        console.log(token)
        console.log(err)
        return res.status(403).json("Token is not valid!")
      }
      req.user = user;
      next()
    })
  } else {
    res.status(401).json('You are not authorized')
  }
}

app.post('/logout', verify, (req, res) => {
  const refreshToken = req.body.token;
  console.log(refreshToken)
  refreshTokens = refreshTokens.filter((token) => token !== refreshToken)
  res.status(200).json("You logged out succesfully")
})

app.delete('/users/:id', verify, (req, res) => {
  if (req.user.id === parseInt(req.params.id) || req.user.isAdmin) {
    res.status(200).json("User has been deleted")
  } else {
    res.status(403).json("You are not allowed to delete this user")
  }
})